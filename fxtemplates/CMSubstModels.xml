<beast version='2.7'
       namespace='beast.base.core:beast.base.inference:beast.base.inference.util:
       beast.evolution.nuc:beast.base.evolution.alignment:beast.base.evolution.datatype:
       beast.base.evolution.branchratemodel:beast.base.evolution.speciation:
       beast.base.evolution.tree.coalescent:beast.base.math.distributions:
       beast.base.evolution.operator:beast.base.inference.operator:beast.evolution:
       beast.base.evolution.sitemodel:beast.base.evolution.substitutionmodel:beast.base.evolution.likelihood:
       codonmodels:codonmodels.evolution:codonmodels.evolution.alignment:codonmodels.evolution.datatype:
       codonmodels.evolution.likelihood:codonmodels.evolution.operators:codonmodels.evolution.tree'
       templateinfo='sub-template for codon substitution models'>


    <mergewith point='codonSubstModelTemplates'>
        <!-- gamma site model -->
        <subtemplate id='Gamma Site Model' class='beast.base.evolution.sitemodel.SiteModel' mainid='SiteModel.s:$(n)'>
            <![CDATA[
            <plugin spec='SiteModel' id="SiteModel.s:$(n)" gammaCategoryCount='0'>
                <!--substModel will be automatically detected /-->
                <proportionInvariant spec='parameter.RealParameter' id='proportionInvariant.s:$(n)' value='0.0' lower='0' upper='1' estimate='false'/>
                <mutationRate        spec='parameter.RealParameter' id='mutationRate.s:$(n)' value='1.0'        estimate='false'/>
                <shape               spec='parameter.RealParameter' id='gammaShape.s:$(n)' value='1.0'         estimate='false'/>
            </plugin>

                <prior id='MutationRatePrior.s:$(n)' x='@mutationRate.s:$(n)'><distr spec="OneOnX"/></prior>
            <prior id='GammaShapePrior.s:$(n)' x='@gammaShape.s:$(n)'><distr spec="beast.base.inference.distribution.Exponential" mean='1'/></prior>
            <prior id='PropInvariantPrior.s:$(n)' x='@proportionInvariant.s:$(n)'><distr spec="beast.base.inference.distribution.Uniform" lower='0' upper='1'/></prior>

            <operator id='proportionInvariantScaler.s:$(n)' spec='ScaleOperator' scaleFactor="0.5" weight="0.1" parameter="@proportionInvariant.s:$(n)"/>
            <operator id='mutationRateScaler.s:$(n)' spec='ScaleOperator' scaleFactor="0.5" weight="0.1" parameter="@mutationRate.s:$(n)"/>
            <operator id='gammaShapeScaler.s:$(n)' spec='ScaleOperator' scaleFactor="0.5" weight="0.1" parameter="@gammaShape.s:$(n)"/>
            ]]>

            <connect method="beastfx.app.inputeditor.SiteModelInputEditor.customConnector"/>

            <!-- when FixMeanMutationRatesOperator, the prior is uniform due to the operator -->
            <connect srcID='MutationRatePrior.s:$(n)'         targetID='prior' inputName='distribution' if='nooperator(FixMeanMutationRatesOperator) and inlikelihood(mutationRate.s:$(n)) and mutationRate.s:$(n)/estimate=true'/>

            <connect srcID='proportionInvariant.s:$(n)'       targetID='state' inputName='stateNode' if='inlikelihood(proportionInvariant.s:$(n)) and proportionInvariant.s:$(n)/estimate=true'/>
            <connect srcID='mutationRate.s:$(n)'              targetID='state' inputName='stateNode' if='inlikelihood(mutationRate.s:$(n)) and mutationRate.s:$(n)/estimate=true'/>
            <connect srcID='gammaShape.s:$(n)'                targetID='state' inputName='stateNode' if='inlikelihood(gammaShape.s:$(n)) and gammaShape.s:$(n)/estimate=true'/>


            <connect srcID='proportionInvariantScaler.s:$(n)' targetID='mcmc' inputName='operator' if='inlikelihood(proportionInvariant.s:$(n)) and proportionInvariant.s:$(n)/estimate=true'>Scales proportion of invariant sites parameter of partition $(n)</connect>
            <connect srcID='mutationRateScaler.s:$(n)'        targetID='mcmc' inputName='operator' if='nooperator(FixMeanMutationRatesOperator) and inlikelihood(mutationRate.s:$(n)) and mutationRate.s:$(n)/estimate=true'>Scales mutation rate of partition s:$(n)</connect>
            <connect srcID='gammaShapeScaler.s:$(n)'          targetID='mcmc' inputName='operator' if='inlikelihood(gammaShape.s:$(n)) and gammaShape.s:$(n)/estimate=true'>Scales gamma shape parameter of partition s:$(n)</connect>

            <connect srcID='proportionInvariant.s:$(n)'       targetID='tracelog' inputName='log' if='inposterior(proportionInvariant.s:$(n)) and proportionInvariant.s:$(n)/estimate=true'/>
            <connect srcID='mutationRate.s:$(n)'              targetID='tracelog' inputName='log' if='inlikelihood(mutationRate.s:$(n)) and mutationRate.s:$(n)/estimate=true'/>
            <connect srcID='gammaShape.s:$(n)'                targetID='tracelog' inputName='log' if='inlikelihood(gammaShape.s:$(n)) and gammaShape.s:$(n)/estimate=true'/>

            <connect srcID='GammaShapePrior.s:$(n)'           targetID='prior' inputName='distribution' if='inlikelihood(gammaShape.s:$(n)) and gammaShape.s:$(n)/estimate=true'>Prior on gamma shape for partition s:$(n)</connect>
            <connect srcID='PropInvariantPrior.s:$(n)'        targetID='prior' inputName='distribution' if='inlikelihood(proportionInvariant.s:$(n)) and proportionInvariant.s:$(n)/estimate=true'>Prior on proportion invariant for partition s:$(n)</connect>

        </subtemplate>


        <!-- codon subst models -->
        <subtemplate id="CodonModel_M0" class="codonmodels.M0Model" mainid="M0.s:$(n)">
            <![CDATA[
        <plugin spec="codonmodels.M0Model" id="M0.s:$(n)">
            <parameter id="M0.omega.s:$(n)" name="omega" value="1.0"/>
            <parameter id="M0.kappa.s:$(n)" name="kappa" value="2.0"/>
            <frequencies id="F3X4Freqs.s:$(n)" spec="codonmodels.CodonFrequencies">
                <data idref="$(n)"/>
            </frequencies>
        </plugin>

        <plugin id='OmegaScaler.s:$(n)' spec='ScaleOperator' scaleFactor="0.5" weight="1" parameter="@M0.omega.s:$(n)"/>
        <plugin id='KappaScaler.s:$(n)' spec='ScaleOperator' scaleFactor="0.5" weight="1" parameter="@M0.kappa.s:$(n)"/>

        <prior id='OmegaPrior.s:$(n)' x='@M0.omega.s:$(n)'>
            <distr spec="LogNormalDistributionModel" meanInRealSpace='false'>
                <parameter name='M' value="-3.0" estimate='false'/>
                <parameter name='S' value="1.25" estimate='false'/>
            </distr>
		</prior>
        <prior id='KappaPrior.s:$(n)' x='@M0.kappa.s:$(n)'>
            <distr spec="LogNormalDistributionModel" meanInRealSpace='false'>
                <parameter name='M' value="2" estimate='false'/>
                <parameter name='S' value="1.25" estimate='false'/>
            </distr>
		</prior>
]]>
            <connect srcID='M0.omega.s:$(n)' targetID='state' inputName='stateNode'
                     if='inlikelihood(M0.omega.s:$(n)) and M0.omega.s:$(n)/estimate=true'/>
            <connect srcID='M0.kappa.s:$(n)' targetID='state' inputName='stateNode'
                     if='inlikelihood(M0.kappa.s:$(n)) and M0.kappa.s:$(n)/estimate=true'/>

            <connect srcID='OmegaScaler.s:$(n)' targetID='mcmc' inputName='operator'
                     if='inlikelihood(M0.omega.s:$(n)) and M0.omega.s:$(n)/estimate=true'>
                Scale M0 omega parameter of partition s:$(n)
            </connect>
            <connect srcID='KappaScaler.s:$(n)' targetID='mcmc' inputName='operator'
                     if='inlikelihood(M0.kappa.s:$(n)) and M0.kappa.s:$(n)/estimate=true'>
                Scale M0 kappa parameter of partition s:$(n)
            </connect>

            <connect srcID='M0.omega.s:$(n)' targetID='screenlog' inputName='log'
                     if='inlikelihood(M0.omega.s:$(n)) and M0.omega.s:$(n)/estimate=true'/>
            <connect srcID='M0.kappa.s:$(n)' targetID='screenlog' inputName='log'
                     if='inlikelihood(M0.kappa.s:$(n)) and M0.kappa.s:$(n)/estimate=true'/>
            <connect srcID='M0.omega.s:$(n)' targetID='tracelog' inputName='log'
                     if='inlikelihood(M0.omega.s:$(n)) and M0.omega.s:$(n)/estimate=true'/>
            <connect srcID='M0.kappa.s:$(n)' targetID='tracelog' inputName='log'
                     if='inlikelihood(M0.kappa.s:$(n)) and M0.kappa.s:$(n)/estimate=true'/>

            <connect srcID='OmegaPrior.s:$(n)' targetID='prior' inputName='distribution'
                     if='inlikelihood(M0.omega.s:$(n)) and M0.omega.s:$(n)/estimate=true'>
                M0 omega parameter of partition s:$(n)
            </connect>
            <connect srcID='KappaPrior.s:$(n)' targetID='prior' inputName='distribution'
                     if='inlikelihood(M0.kappa.s:$(n)) and M0.kappa.s:$(n)/estimate=true'>
                M0 kappa parameter of partition s:$(n)
            </connect>

        </subtemplate>


        <!-- frequency models -->
        <subtemplate id='F3X4' class='codonmodels.CodonFrequencies' mainid='F3X4Freqs.s:$(n)'
                     suppressInputs="codonmodels.CodonFrequencies.estimate,
                     codonmodels.CodonFrequencies.frequencies">
            <![CDATA[
            <frequencies id='F3X4Freqs.s:$(n)' spec='codonmodels.CodonFrequencies' data='@$(n)' pi="F3X4"/>
]]>
        </subtemplate>

        <subtemplate id='F1X4' class='codonmodels.CodonFrequencies' mainid='F1X4Freqs.s:$(n)'
                     suppressInputs="codonmodels.CodonFrequencies.estimate,
                     codonmodels.CodonFrequencies.frequencies">
            <![CDATA[
            <frequencies id='F1X4Freqs.s:$(n)' spec='codonmodels.CodonFrequencies' data='@$(n)' pi="F1X4"/>
]]>
        </subtemplate>

        <subtemplate id='equal' class='codonmodels.CodonFrequencies' mainid='equalFreqs.s:$(n)'
                     suppressInputs="codonmodels.CodonFrequencies.estimate,
                     codonmodels.CodonFrequencies.frequencies">
            <![CDATA[
            <frequencies id='equalFreqs.s:$(n)' spec='codonmodels.CodonFrequencies' data='@$(n)' pi="equal"/>
]]>
        </subtemplate>

        <subtemplate id='F6n' class='codonmodels.CodonFrequencies' mainid='F6nFreqs.s:$(n)'
                     suppressInputs="codonmodels.CodonFrequencies.estimate,
                     codonmodels.CodonFrequencies.frequencies">
            <![CDATA[
            <frequencies id='F6nFreqs.s:$(n)' spec='codonmodels.CodonFrequencies' data='@$(n)' pi="F6n"/>
]]>
        </subtemplate>

    </mergewith>

</beast>

